        -:    0:Source:/mnt/c/Users/White Fox/Downloads/l4/l4/tests.c
        -:    0:Graph:/mnt/c/Users/White Fox/Downloads/l4/l4/cmake-build-debug-coverage/CMakeFiles/l4.dir/tests.c.gcno
        -:    0:Data:/mnt/c/Users/White Fox/Downloads/l4/l4/cmake-build-debug-coverage/CMakeFiles/l4.dir/tests.c.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:Solution written by
        -:    4:Ilovan Cristian Daniel
        -:    5:
        -:    6:*/
        -:    7:
        -:    8:#include "tests.h"
        -:    9:#include <assert.h>
        -:   10:#include <string.h>
        -:   11:#include "domain.h"
        -:   12:#include "repository.h"
        -:   13:#include "service.h"
        -:   14:
        -:   15:// domain
        -:   16:
        -:   17:// product
        -:   18:
        -:   19:// constructors
        -:   20:
        -:   21:// test productConstructor function
        -:   22:// in: true
        -:   23:// out: true
function testProductConstructor called 1 returned 100% blocks executed 70%
        1:   24:void testProductConstructor()
        -:   25:{
        -:   26:	Product p;
        -:   27:	
        1:   28:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:   28-block  0
call    0 returned 1
        -:   29:	
       1*:   30:	assert(productGetI(&p) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   30-block  0
call    3 never executed
       1*:   31:	assert(!strcmp(productGetType(&p),"a"));
        1:   31-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   31-block  1
call    3 never executed
       1*:   32:	assert(!strcmp(productGetProducedBy(&p),"b"));
        1:   32-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   32-block  1
call    3 never executed
       1*:   33:	assert(!strcmp(productGetModel(&p),"c"));
        1:   33-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   33-block  1
call    3 never executed
       1*:   34:	assert(productGetPrice(&p) == 2);
        1:   34-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   34-block  1
call    3 never executed
       1*:   35:	assert(productGetQuantity(&p) == 3);
        1:   35-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   35-block  1
call    3 never executed
       1*:   36:	assert(productGetMemory(&p) == 1);
        1:   36-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   36-block  1
call    3 never executed
        1:   37:}
        -:   38:
        -:   39:// test productEqualConstructor function
        -:   40:// in: true
        -:   41:// out: true
function testproductEqualConstructor called 1 returned 100% blocks executed 71%
        1:   42:void testproductEqualConstructor()
        -:   43:{
        -:   44:	Product p, t;
        -:   45:	
        1:   46:	productConstructor(&t, 1, "a", "b", "c", 2, 3, 1);
        1:   46-block  0
call    0 returned 1
        -:   47:	
        1:   48:	productEqualConstructor(&p, &t);
call    0 returned 1
        -:   49:	
       1*:   50:	assert(productGetI(&p) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   50-block  0
call    3 never executed
       1*:   51:	assert(!strcmp(productGetType(&p),"a"));
        1:   51-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   51-block  1
call    3 never executed
       1*:   52:	assert(!strcmp(productGetProducedBy(&p),"b"));
        1:   52-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   52-block  1
call    3 never executed
       1*:   53:	assert(!strcmp(productGetModel(&p),"c"));
        1:   53-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   53-block  1
call    3 never executed
       1*:   54:	assert(productGetPrice(&p) == 2);
        1:   54-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   54-block  1
call    3 never executed
       1*:   55:	assert(productGetQuantity(&p) == 3);
        1:   55-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   55-block  1
call    3 never executed
       1*:   56:	assert(productGetMemory(&p) == 1);
        1:   56-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   56-block  1
call    3 never executed
        1:   57:}
        -:   58:
        -:   59:
        -:   60:
        -:   61:
        -:   62:
        -:   63:// set functions
        -:   64:
        -:   65:// test productSetI function
        -:   66:// in: true
        -:   67:// out: true
function testProductSetI called 1 returned 100% blocks executed 83%
        1:   68:void testProductSetI()
        -:   69:{
        -:   70:	Product p;
        -:   71:	
        1:   72:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:   72-block  0
call    0 returned 1
        -:   73:	
        1:   74:	productSetI(&p, 5);
call    0 returned 1
        -:   75:	
       1*:   76:	assert(productGetI(&p) == 5);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   76-block  0
call    3 never executed
        1:   77:}
        -:   78:
        -:   79:// test productSetType function
        -:   80:// in: true
        -:   81:// out: true
function testProductSetType called 1 returned 100% blocks executed 83%
        1:   82:void testProductSetType()
        -:   83:{
        -:   84:	Product p;
        -:   85:	
        1:   86:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:   86-block  0
call    0 returned 1
        -:   87:	
        1:   88:	productSetType(&p, "z");
call    0 returned 1
        -:   89:	
       1*:   90:	assert(!strcmp(productGetType(&p), "z"));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   90-block  0
call    3 never executed
        1:   91:}
        -:   92:
        -:   93:// test productSetProducedBy function
        -:   94:// in: true
        -:   95:// out: true
function testProductSetProducedBy called 1 returned 100% blocks executed 83%
        1:   96:void testProductSetProducedBy()
        -:   97:{
        -:   98:	Product p;
        -:   99:	
        1:  100:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:  100-block  0
call    0 returned 1
        -:  101:	
        1:  102:	productSetProducedBy(&p, "z");
call    0 returned 1
        -:  103:	
       1*:  104:	assert(!strcmp(productGetProducedBy(&p), "z"));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  104-block  0
call    3 never executed
        1:  105:}
        -:  106:
        -:  107:// test productSetModel function
        -:  108:// in: true
        -:  109:// out: true
function testProductSetModel called 1 returned 100% blocks executed 83%
        1:  110:void testProductSetModel()
        -:  111:{
        -:  112:	Product p;
        -:  113:	
        1:  114:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:  114-block  0
call    0 returned 1
        -:  115:	
        1:  116:	productSetModel(&p, "z");
call    0 returned 1
        -:  117:	
       1*:  118:	assert(!strcmp(productGetModel(&p), "z"));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  118-block  0
call    3 never executed
        1:  119:}
        -:  120:
        -:  121:// test productSetPrice function
        -:  122:// in: true
        -:  123:// out: true
function testProductSetPrice called 1 returned 100% blocks executed 83%
        1:  124:void testProductSetPrice()
        -:  125:{
        -:  126:	Product p;
        -:  127:	
        1:  128:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:  128-block  0
call    0 returned 1
        -:  129:	
        1:  130:	productSetPrice(&p, 5);
call    0 returned 1
        -:  131:	
       1*:  132:	assert(productGetPrice(&p) == 5);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  132-block  0
call    3 never executed
        1:  133:}
        -:  134:
        -:  135:// test productSetQuantity function
        -:  136:// in: true
        -:  137:// out: true
function testProductSetQuantity called 1 returned 100% blocks executed 83%
        1:  138:void testProductSetQuantity()
        -:  139:{
        -:  140:	Product p;
        -:  141:	
        1:  142:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:  142-block  0
call    0 returned 1
        -:  143:	
        1:  144:	productSetQuantity(&p, 5);
call    0 returned 1
        -:  145:	
       1*:  146:	assert(productGetQuantity(&p) == 5);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  146-block  0
call    3 never executed
        1:  147:}
        -:  148:
        -:  149:// test productSetMemory function
        -:  150:// in: true
        -:  151:// out: true
function testProductSetMemory called 1 returned 100% blocks executed 83%
        1:  152:void testProductSetMemory()
        -:  153:{
        -:  154:	Product p;
        -:  155:	
        1:  156:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:  156-block  0
call    0 returned 1
        -:  157:	
        1:  158:	productSetMemory(&p, 0);
call    0 returned 1
        -:  159:	
       1*:  160:	assert(productGetMemory(&p) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  160-block  0
call    3 never executed
        1:  161:}
        -:  162:
        -:  163:
        -:  164:
        -:  165:
        -:  166:
        -:  167:// get functions
        -:  168:
        -:  169:// test productGetI function
        -:  170:// in: true
        -:  171:// out: true
function testProductGetI called 1 returned 100% blocks executed 80%
        1:  172:void testProductGetI()
        -:  173:{
        -:  174:	Product p;
        -:  175:	
        1:  176:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:  176-block  0
call    0 returned 1
        -:  177:	
       1*:  178:	assert(productGetI(&p) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  178-block  0
call    3 never executed
        1:  179:}
        -:  180:
        -:  181:// test productGetType function
        -:  182:// in: true
        -:  183:// out: true
function testProductGetType called 1 returned 100% blocks executed 80%
        1:  184:void testProductGetType()
        -:  185:{
        -:  186:	Product p;
        -:  187:	
        1:  188:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:  188-block  0
call    0 returned 1
        -:  189:	
       1*:  190:	assert(!strcmp(productGetType(&p),"a"));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  190-block  0
call    3 never executed
        1:  191:}
        -:  192:
        -:  193:// test productGetProducedBy function
        -:  194:// in: true
        -:  195:// out: true
function testProductGetProducedBy called 1 returned 100% blocks executed 80%
        1:  196:void testProductGetProducedBy()
        -:  197:{
        -:  198:	Product p;
        -:  199:	
        1:  200:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:  200-block  0
call    0 returned 1
        -:  201:	
       1*:  202:	assert(!strcmp(productGetProducedBy(&p),"b"));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  202-block  0
call    3 never executed
        1:  203:}
        -:  204:
        -:  205:// test productGetModel function
        -:  206:// in: true
        -:  207:// out: true
function testProductGetModel called 1 returned 100% blocks executed 80%
        1:  208:void testProductGetModel()
        -:  209:{
        -:  210:	Product p;
        -:  211:	
        1:  212:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:  212-block  0
call    0 returned 1
        -:  213:	
       1*:  214:	assert(!strcmp(productGetModel(&p),"c"));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  214-block  0
call    3 never executed
        1:  215:}
        -:  216:
        -:  217:// test productGetPrice function
        -:  218:// in: true
        -:  219:// out: true
function testProductGetPrice called 1 returned 100% blocks executed 80%
        1:  220:void testProductGetPrice()
        -:  221:{
        -:  222:	Product p;
        -:  223:	
        1:  224:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:  224-block  0
call    0 returned 1
        -:  225:	
       1*:  226:	assert(productGetPrice(&p) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  226-block  0
call    3 never executed
        1:  227:}
        -:  228:
        -:  229:// test productGetQuantity function
        -:  230:// in: true
        -:  231:// out: true
function testProductGetQuantity called 1 returned 100% blocks executed 80%
        1:  232:void testProductGetQuantity()
        -:  233:{
        -:  234:	Product p;
        -:  235:	
        1:  236:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:  236-block  0
call    0 returned 1
        -:  237:	
       1*:  238:	assert(productGetQuantity(&p) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  238-block  0
call    3 never executed
        1:  239:}
        -:  240:
        -:  241:// test productGetMemory function
        -:  242:// in: true
        -:  243:// out: true
function testProductGetMemory called 1 returned 100% blocks executed 80%
        1:  244:void testProductGetMemory()
        -:  245:{
        -:  246:	Product p;
        -:  247:	
        1:  248:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:  248-block  0
call    0 returned 1
        -:  249:	
       1*:  250:	assert(productGetMemory(&p) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  250-block  0
call    3 never executed
        1:  251:}
        -:  252:
        -:  253:
        -:  254:
        -:  255:
        -:  256:
        -:  257:// operator functions
        -:  258:
        -:  259:// test productEqualAttributes function
        -:  260:// in: true
        -:  261:// out: true
function testProductEqualAttributes called 1 returned 100% blocks executed 81%
        1:  262:void testProductEqualAttributes()
        -:  263:{
        -:  264:	Product p, t;
        -:  265:	
        1:  266:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:  266-block  0
call    0 returned 1
        1:  267:	productConstructor(&t, 1, "a", "b", "c", 2, 3, 1);
call    0 returned 1
        -:  268:	
       1*:  269:	assert(productEqualAttributes(&p, &t));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  269-block  0
call    3 never executed
        -:  270:	
        1:  271:	productConstructor(&p, 1, "a", "b", "c", 2, 1, 1);
        1:  271-block  0
call    0 returned 1
        1:  272:	productConstructor(&t, 0, "a", "b", "c", 2, 3, 1);
call    0 returned 1
        -:  273:	
       1*:  274:	assert(productEqualAttributes(&p, &t));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  274-block  0
call    3 never executed
        -:  275:	
        1:  276:	productConstructor(&p, 1, "a", "b", "c", 5, 3, 1);
        1:  276-block  0
call    0 returned 1
        1:  277:	productConstructor(&t, 1, "a", "b", "c", 2, 3, 1);
call    0 returned 1
        -:  278:	
       1*:  279:	assert(!productEqualAttributes(&p, &t));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  279-block  0
call    3 never executed
        -:  280:	
        1:  281:	productConstructor(&p, 1, "a", "b", "c", 2, 1, 1);
        1:  281-block  0
call    0 returned 1
        1:  282:	productConstructor(&t, 0, "a", "b", "z", 2, 3, 1);
call    0 returned 1
        -:  283:	
       1*:  284:	assert(!productEqualAttributes(&p, &t));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  284-block  0
call    3 never executed
        -:  285:	
        1:  286:	productConstructor(&p, 1, "z", "b", "c", 2, 1, 1);
        1:  286-block  0
call    0 returned 1
        1:  287:	productConstructor(&t, 0, "a", "b", "z", 2, 3, 1);
call    0 returned 1
        -:  288:	
       1*:  289:	assert(!productEqualAttributes(&p, &t));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  289-block  0
call    3 never executed
        -:  290:	
        1:  291:	productConstructor(&p, 1, "a", "z", "z", 2, 1, 1);
        1:  291-block  0
call    0 returned 1
        1:  292:	productConstructor(&t, 0, "a", "b", "z", 2, 3, 1);
call    0 returned 1
        -:  293:	
       1*:  294:	assert(!productEqualAttributes(&p, &t));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  294-block  0
call    3 never executed
        1:  295:}
        -:  296:
        -:  297:
        -:  298:
        -:  299:
        -:  300:
        -:  301:// test product function
        -:  302:// in: true
        -:  303:// out: true
function testProduct called 1 returned 100% blocks executed 100%
        1:  304:void testProduct()
        -:  305:{
        -:  306:	// constructors
        1:  307:	testProductConstructor();
        1:  307-block  0
call    0 returned 1
        1:  308:	testproductEqualConstructor();
call    0 returned 1
        -:  309:
        -:  310:	// set functions
        1:  311:	testProductSetI();
call    0 returned 1
        1:  312:	testProductSetType();
call    0 returned 1
        1:  313:	testProductSetProducedBy();
call    0 returned 1
        1:  314:	testProductSetModel();
call    0 returned 1
        1:  315:	testProductSetPrice();
call    0 returned 1
        1:  316:	testProductSetQuantity();
call    0 returned 1
        1:  317:	testProductSetMemory();
call    0 returned 1
        -:  318:
        -:  319:	// get functions
        1:  320:	testProductGetI();
call    0 returned 1
        1:  321:	testProductGetType();
call    0 returned 1
        1:  322:	testProductGetProducedBy();
call    0 returned 1
        1:  323:	testProductGetModel();
call    0 returned 1
        1:  324:	testProductGetPrice();
call    0 returned 1
        1:  325:	testProductGetQuantity();
call    0 returned 1
        1:  326:	testProductGetMemory();
call    0 returned 1
        -:  327:
        -:  328:	// operator functions
        1:  329:	testProductEqualAttributes();
call    0 returned 1
        1:  330:}
        -:  331:
        -:  332:
        -:  333:
        -:  334:
        -:  335:
        -:  336:// repository
        -:  337:
        -:  338:// products
        -:  339:
        -:  340:// test productsConstructor function
        -:  341:// in: true
        -:  342:// out: true
function testProductsConstructor called 1 returned 100% blocks executed 67%
        1:  343:void testProductsConstructor()
        -:  344:{
        -:  345:	Products p;
        -:  346:	
        1:  347:	productsConstructor(&p);
        1:  347-block  0
call    0 returned 1
        -:  348:	
       1*:  349:	assert(p.size == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  349-block  0
call    2 never executed
       1*:  350:	assert(p.products == NULL);
        1:  350-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  350-block  1
call    2 never executed
        1:  351:}
        -:  352:
        -:  353:// test repositoryExistsAttributes function
        -:  354:// in: true
        -:  355:// out: true
function testRepositoryExistsAttributes called 1 returned 100% blocks executed 89%
        1:  356:void testRepositoryExistsAttributes()
        -:  357:{
        -:  358:	Products r;
        -:  359:	Product p, t;
        -:  360:	
        1:  361:	productsConstructor(&r);
        1:  361-block  0
call    0 returned 1
        -:  362:	
        -:  363:	// test 1
        1:  364:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
call    0 returned 1
        1:  365:	productConstructor(&t, 1, "a", "b", "c", 2, 3, 1);
call    0 returned 1
        1:  366:	repositoryAdauga(&r, &p);
call    0 returned 1
       1*:  367:	assert(repositoryExistsAttributes(&r, &t) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  367-block  0
call    3 never executed
        1:  368:	repositorySterge(&r, 0);
        1:  368-block  0
call    0 returned 1
        -:  369:	
        1:  370:	productsDestructor(&r);
call    0 returned 1
        1:  371:	productsConstructor(&r);
call    0 returned 1
        -:  372:	
        -:  373:	// test 2
        1:  374:	productConstructor(&p, 1, "a", "b", "c", 2, 1, 1);
call    0 returned 1
        1:  375:	productConstructor(&t, 0, "a", "b", "c", 2, 3, 1);
call    0 returned 1
        1:  376:	repositoryAdauga(&r, &p);
call    0 returned 1
       1*:  377:	assert(repositoryExistsAttributes(&r, &t) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  377-block  0
call    3 never executed
        1:  378:	repositorySterge(&r, 0);
        1:  378-block  0
call    0 returned 1
        -:  379:	
        1:  380:	productsDestructor(&r);
call    0 returned 1
        1:  381:	productsConstructor(&r);
call    0 returned 1
        -:  382:	
        -:  383:	// test 3
        1:  384:	productConstructor(&p, 1, "a", "b", "c", 5, 3, 1);
call    0 returned 1
        1:  385:	productConstructor(&t, 1, "a", "b", "c", 2, 3, 1);
call    0 returned 1
        1:  386:	repositoryAdauga(&r, &p);
call    0 returned 1
       1*:  387:	assert(repositoryExistsAttributes(&r, &t) == -1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  387-block  0
call    3 never executed
        1:  388:	repositorySterge(&r, 0);
        1:  388-block  0
call    0 returned 1
        -:  389:	
        1:  390:	productsDestructor(&r);
call    0 returned 1
        1:  391:	productsConstructor(&r);
call    0 returned 1
        -:  392:	
        -:  393:	// test 4
        1:  394:	productConstructor(&p, 1, "a", "b", "c", 2, 1, 1);
call    0 returned 1
        1:  395:	productConstructor(&t, 0, "a", "b", "z", 2, 3, 1);
call    0 returned 1
        1:  396:	repositoryAdauga(&r, &p);
call    0 returned 1
       1*:  397:	assert(repositoryExistsAttributes(&r, &t) == -1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  397-block  0
call    3 never executed
        1:  398:	repositorySterge(&r, 0);
        1:  398-block  0
call    0 returned 1
        -:  399:	
        1:  400:	productsDestructor(&r);
call    0 returned 1
        1:  401:}
        -:  402:
        -:  403:// tests a products (repository) function
        -:  404:// the name of the function is after
        -:  405:// "test" from the name of this function
        -:  406:// in: true
        -:  407:// out: true
function testRepositoryExists called 1 returned 100% blocks executed 77%
        1:  408:void testRepositoryExists()
        -:  409:{
        -:  410:	Products r;
        -:  411:	Product p;
        -:  412:	
        1:  413:	productsConstructor(&r);
        1:  413-block  0
call    0 returned 1
        -:  414:	
        -:  415:	// test 1
       1*:  416:	assert(!repositoryExists(&r, 0));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  416-block  0
call    3 never executed
        1:  417:	productConstructor(&p, 0, "a", "b", "c", 2, 3, 1);
        1:  417-block  0
call    0 returned 1
        1:  418:	repositoryAdauga(&r, &p);
call    0 returned 1
       1*:  419:	assert(repositoryExists(&r, 0));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  419-block  0
call    3 never executed
        -:  420:	
        -:  421:	// test 2
       1*:  422:	assert(!repositoryExists(&r, 1));
        1:  422-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  422-block  1
call    3 never executed
        1:  423:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
        1:  423-block  0
call    0 returned 1
        1:  424:	repositoryAdauga(&r, &p);
call    0 returned 1
       1*:  425:	assert(repositoryExists(&r, 1));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  425-block  0
call    3 never executed
        -:  426:	
        -:  427:	// test 3
       1*:  428:	assert(!repositoryExists(&r, 2));
        1:  428-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  428-block  1
call    3 never executed
        1:  429:	productConstructor(&p, 2, "a", "b", "c", 2, 3, 1);
        1:  429-block  0
call    0 returned 1
        1:  430:	repositoryAdauga(&r, &p);
call    0 returned 1
       1*:  431:	assert(repositoryExists(&r, 2));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  431-block  0
call    3 never executed
        -:  432:	
        -:  433:	// test 4
       1*:  434:	assert(!repositoryExists(&r, 3));
        1:  434-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  434-block  1
call    3 never executed
        1:  435:	productConstructor(&p, 3, "a", "b", "c", 2, 3, 1);
        1:  435-block  0
call    0 returned 1
        1:  436:	repositoryAdauga(&r, &p);
call    0 returned 1
       1*:  437:	assert(repositoryExists(&r, 3));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  437-block  0
call    3 never executed
        1:  438:	repositorySterge(&r, 3);
        1:  438-block  0
call    0 returned 1
       1*:  439:	assert(!repositoryExists(&r, 3));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  439-block  0
call    3 never executed
        -:  440:	
        1:  441:	productsDestructor(&r);
        1:  441-block  0
call    0 returned 1
        1:  442:}
        -:  443:
        -:  444:// tests a products (repository) function
        -:  445:// the name of the function is after
        -:  446:// "test" from the name of this function
        -:  447:// in: true
        -:  448:// out: true
function testRepositoryAdauga called 1 returned 100% blocks executed 74%
        1:  449:void testRepositoryAdauga()
        -:  450:{
        -:  451:	Products r;
        -:  452:	Product p, *t;
        -:  453:	
        1:  454:	productsConstructor(&r);
        1:  454-block  0
call    0 returned 1
        -:  455:	
        1:  456:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
call    0 returned 1
        1:  457:	repositoryAdauga(&r, &p);
call    0 returned 1
        -:  458:	
        1:  459:	t = repositoryGetProduct(&r, 0);
call    0 returned 1
        -:  460:	
       1*:  461:	assert(productGetI(t) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  461-block  0
call    3 never executed
       1*:  462:	assert(!strcmp(productGetType(t),"a"));
        1:  462-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  462-block  1
call    3 never executed
       1*:  463:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  463-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  463-block  1
call    3 never executed
       1*:  464:	assert(!strcmp(productGetModel(t),"c"));
        1:  464-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  464-block  1
call    3 never executed
       1*:  465:	assert(productGetPrice(t) == 2);
        1:  465-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  465-block  1
call    3 never executed
       1*:  466:	assert(productGetQuantity(t) == 3);
        1:  466-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  466-block  1
call    3 never executed
       1*:  467:	assert(productGetMemory(t) == 1);
        1:  467-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  467-block  1
call    3 never executed
        -:  468:	
        1:  469:	productsDestructor(&r);
        1:  469-block  0
call    0 returned 1
        1:  470:}
        -:  471:
        -:  472:// tests a products (repository) function
        -:  473:// the name of the function is after
        -:  474:// "test" from the name of this function
        -:  475:// in: true
        -:  476:// out: true
function testRepositorySterge called 1 returned 100% blocks executed 75%
        1:  477:void testRepositorySterge()
        -:  478:{
        -:  479:	Products r;
        -:  480:	Product p, *t;
        -:  481:	
        1:  482:	productsConstructor(&r);
        1:  482-block  0
call    0 returned 1
        -:  483:	
        1:  484:	productConstructor(&p, 1, "a", "b", "c", 2, 3, 1);
call    0 returned 1
        1:  485:	repositoryAdauga(&r, &p);
call    0 returned 1
        1:  486:	repositorySterge(&r, 0);
call    0 returned 1
        -:  487:	
        1:  488:	t = repositoryGetProduct(&r, 0);
call    0 returned 1
        -:  489:	
       1*:  490:	assert(productGetI(t) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  490-block  0
call    3 never executed
       1*:  491:	assert(!strcmp(productGetType(t),"a"));
        1:  491-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  491-block  1
call    3 never executed
       1*:  492:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  492-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  492-block  1
call    3 never executed
       1*:  493:	assert(!strcmp(productGetModel(t),"c"));
        1:  493-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  493-block  1
call    3 never executed
       1*:  494:	assert(productGetPrice(t) == 2);
        1:  494-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  494-block  1
call    3 never executed
       1*:  495:	assert(productGetQuantity(t) == 3);
        1:  495-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  495-block  1
call    3 never executed
       1*:  496:	assert(productGetMemory(t) == 0);
        1:  496-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  496-block  1
call    3 never executed
        -:  497:	
        1:  498:	productsDestructor(&r);
        1:  498-block  0
call    0 returned 1
        1:  499:}
        -:  500:
        -:  501:// tests a products (repository) function
        -:  502:// the name of the function is after
        -:  503:// "test" from the name of this function
        -:  504:// in: true
        -:  505:// out: true
function testRepositorySetProduct called 1 returned 100% blocks executed 75%
        1:  506:void testRepositorySetProduct()
        -:  507:{
        -:  508:	Products r;
        -:  509:	Product p, *t;
        -:  510:	
        1:  511:	productsConstructor(&r);
        1:  511-block  0
call    0 returned 1
        -:  512:	
        1:  513:	productConstructor(&p, 0, "a", "b", "z", 2, 3, 1);
call    0 returned 1
        1:  514:	repositoryAdauga(&r, &p);
call    0 returned 1
        1:  515:	productConstructor(&p, 0, "a", "b", "c", 2, 3, 1);
call    0 returned 1
        1:  516:	repositorySetProduct(&r, 0, &p);
call    0 returned 1
        -:  517:	
       1*:  518:	assert(repositoryExists(&r, 0));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  518-block  0
call    3 never executed
        -:  519:	
        1:  520:	t = repositoryGetProduct(&r, 0);
        1:  520-block  0
call    0 returned 1
        -:  521:	
       1*:  522:	assert(productGetI(t) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  522-block  0
call    3 never executed
       1*:  523:	assert(!strcmp(productGetType(t),"a"));
        1:  523-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  523-block  1
call    3 never executed
       1*:  524:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  524-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  524-block  1
call    3 never executed
       1*:  525:	assert(!strcmp(productGetModel(t),"c"));
        1:  525-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  525-block  1
call    3 never executed
       1*:  526:	assert(productGetPrice(t) == 2);
        1:  526-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  526-block  1
call    3 never executed
       1*:  527:	assert(productGetQuantity(t) == 3);
        1:  527-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  527-block  1
call    3 never executed
       1*:  528:	assert(productGetMemory(t) == 1);
        1:  528-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  528-block  1
call    3 never executed
        -:  529:	
        1:  530:	productsDestructor(&r);
        1:  530-block  0
call    0 returned 1
        1:  531:}
        -:  532:
        -:  533:// tests a products (repository) function
        -:  534:// the name of the function is after
        -:  535:// "test" from the name of this function
        -:  536:// in: true
        -:  537:// out: true
function testRepositoryGetProduct called 1 returned 100% blocks executed 75%
        1:  538:void testRepositoryGetProduct()
        -:  539:{
        -:  540:	Products r;
        -:  541:	Product p, *t;
        -:  542:	
        1:  543:	productsConstructor(&r);
        1:  543-block  0
call    0 returned 1
        -:  544:	
        1:  545:	productConstructor(&p, 0, "a", "b", "z", 2, 3, 1);
call    0 returned 1
        1:  546:	repositoryAdauga(&r, &p);
call    0 returned 1
        1:  547:	productConstructor(&p, 0, "a", "b", "c", 2, 3, 1);
call    0 returned 1
        1:  548:	repositorySetProduct(&r, 0, &p);
call    0 returned 1
        -:  549:	
       1*:  550:	assert(repositoryExists(&r, 0));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  550-block  0
call    3 never executed
        -:  551:	
        1:  552:	t = repositoryGetProduct(&r, 0);
        1:  552-block  0
call    0 returned 1
        -:  553:	
       1*:  554:	assert(productGetI(t) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  554-block  0
call    3 never executed
       1*:  555:	assert(!strcmp(productGetType(t),"a"));
        1:  555-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  555-block  1
call    3 never executed
       1*:  556:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  556-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  556-block  1
call    3 never executed
       1*:  557:	assert(!strcmp(productGetModel(t),"c"));
        1:  557-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  557-block  1
call    3 never executed
       1*:  558:	assert(productGetPrice(t) == 2);
        1:  558-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  558-block  1
call    3 never executed
       1*:  559:	assert(productGetQuantity(t) == 3);
        1:  559-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  559-block  1
call    3 never executed
       1*:  560:	assert(productGetMemory(t) == 1);
        1:  560-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  560-block  1
call    3 never executed
        -:  561:	
        1:  562:	productsDestructor(&r);
        1:  562-block  0
call    0 returned 1
        1:  563:}
        -:  564:
        -:  565:// tests a products (repository) function
        -:  566:// the name of the function is after
        -:  567:// "test" from the name of this function
        -:  568:// in: true
        -:  569:// out: true
function testProducts called 1 returned 100% blocks executed 100%
        1:  570:void testProducts()
        -:  571:{
        1:  572:	testProductsConstructor();
        1:  572-block  0
call    0 returned 1
        -:  573:
        1:  574:	testRepositoryExistsAttributes();
call    0 returned 1
        1:  575:	testRepositoryExists();
call    0 returned 1
        1:  576:	testRepositoryAdauga();
call    0 returned 1
        1:  577:	testRepositorySterge();
call    0 returned 1
        -:  578:
        1:  579:	testRepositorySetProduct();
call    0 returned 1
        1:  580:	testRepositoryGetProduct();
call    0 returned 1
        1:  581:}
        -:  582:
        -:  583:
        -:  584:
        -:  585:
        -:  586:
        -:  587:// service
        -:  588:
        -:  589:// tests a service function
        -:  590:// the name of the function is after
        -:  591:// "test" from the name of this function
        -:  592:// in: true
        -:  593:// out: true
function testServiceAdauga called 1 returned 100% blocks executed 72%
        1:  594:void testServiceAdauga()
        -:  595:{
        -:  596:	Products r;
        -:  597:	Product *p;
        -:  598:	
        1:  599:	productsConstructor(&r);
        1:  599-block  0
call    0 returned 1
        1:  600:	serviceAdauga(&r, "a", "b", "c", 1);
call    0 returned 1
        -:  601:	
       1*:  602:	assert(repositoryExists(&r, 0));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  602-block  0
call    3 never executed
        -:  603:	
        1:  604:	p = repositoryGetProduct(&r, 0);
        1:  604-block  0
call    0 returned 1
        -:  605:	
       1*:  606:	assert(productGetI(p) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  606-block  0
call    3 never executed
       1*:  607:	assert(!strcmp(productGetType(p),"a"));
        1:  607-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  607-block  1
call    3 never executed
       1*:  608:	assert(!strcmp(productGetProducedBy(p),"b"));
        1:  608-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  608-block  1
call    3 never executed
       1*:  609:	assert(!strcmp(productGetModel(p),"c"));
        1:  609-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  609-block  1
call    3 never executed
       1*:  610:	assert(productGetPrice(p) == 1);
        1:  610-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  610-block  1
call    3 never executed
       1*:  611:	assert(productGetQuantity(p) == 1);
        1:  611-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  611-block  1
call    3 never executed
       1*:  612:	assert(productGetMemory(p) == 1);
        1:  612-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  612-block  1
call    3 never executed
        -:  613:	
       1*:  614:	assert(!serviceAdauga(&r, "a", "b", "c", -1));
        1:  614-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  614-block  1
call    3 never executed
        -:  615:	
        1:  616:	productsDestructor(&r);
        1:  616-block  0
call    0 returned 1
        1:  617:}
        -:  618:
        -:  619:// tests a service function
        -:  620:// the name of the function is after
        -:  621:// "test" from the name of this function
        -:  622:// in: true
        -:  623:// out: true
function testServiceActualizare called 1 returned 100% blocks executed 74%
        1:  624:void testServiceActualizare()
        -:  625:{
        -:  626:	Products r;
        -:  627:	Product *p;
        -:  628:	
        1:  629:	productsConstructor(&r);
        1:  629-block  0
call    0 returned 1
        1:  630:	serviceAdauga(&r, "a", "b", "c", 1);
call    0 returned 1
        1:  631:	serviceActualizare(&r, 0, 2, 0);
call    0 returned 1
        1:  632:	serviceActualizare(&r, 0, 3, 1);
call    0 returned 1
        1:  633:	p = repositoryGetProduct(&r, 0);
call    0 returned 1
        -:  634:	
       1*:  635:	assert(productGetI(p) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  635-block  0
call    3 never executed
       1*:  636:	assert(!strcmp(productGetType(p),"a"));
        1:  636-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  636-block  1
call    3 never executed
       1*:  637:	assert(!strcmp(productGetProducedBy(p),"b"));
        1:  637-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  637-block  1
call    3 never executed
       1*:  638:	assert(!strcmp(productGetModel(p),"c"));
        1:  638-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  638-block  1
call    3 never executed
       1*:  639:	assert(productGetPrice(p) == 2);
        1:  639-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  639-block  1
call    3 never executed
       1*:  640:	assert(productGetQuantity(p) == 3);
        1:  640-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  640-block  1
call    3 never executed
       1*:  641:	assert(productGetMemory(p) == 1);
        1:  641-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  641-block  1
call    3 never executed
        -:  642:	
       1*:  643:	assert(serviceActualizare(&r, 1, 1, 1) == 0);
        1:  643-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  643-block  1
call    3 never executed
        -:  644:	
        1:  645:	productsDestructor(&r);
        1:  645-block  0
call    0 returned 1
        1:  646:}
        -:  647:
        -:  648:// tests a service function
        -:  649:// the name of the function is after
        -:  650:// "test" from the name of this function
        -:  651:// in: true
        -:  652:// out: true
function testServiceSterge called 1 returned 100% blocks executed 82%
        1:  653:void testServiceSterge()
        -:  654:{
        -:  655:	Products r;
        -:  656:	
        1:  657:	productsConstructor(&r);
        1:  657-block  0
call    0 returned 1
        1:  658:	serviceAdauga(&r, "a", "b", "c", 1);
call    0 returned 1
       1*:  659:	assert(repositoryExists(&r, 0));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  659-block  0
call    3 never executed
        1:  660:	serviceSterge(&r, 0);
        1:  660-block  0
call    0 returned 1
       1*:  661:	assert(!repositoryExists(&r, 0));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  661-block  0
call    3 never executed
        1:  662:	productsDestructor(&r);
        1:  662-block  0
call    0 returned 1
        1:  663:}
        -:  664:
        -:  665:// tests a service function
        -:  666:// the name of the function is after
        -:  667:// "test" from the name of this function
        -:  668:// in: true
        -:  669:// out: true
function testServiceSort1 called 1 returned 100% blocks executed 70%
        1:  670:void testServiceSort1()
        -:  671:{
        -:  672:	Products p;
        -:  673:	Product *t;
        -:  674:	
        1:  675:	productsConstructor(&p);
        1:  675-block  0
call    0 returned 1
        1:  676:	serviceAdauga(&p, "a", "b", "c", 1);
call    0 returned 1
        1:  677:	serviceAdauga(&p, "a", "b", "c", 1);
call    0 returned 1
        1:  678:	serviceAdauga(&p, "a", "b", "z", 2);
call    0 returned 1
        -:  679:	
        -:  680:	// test 1
        1:  681:	serviceSort(&p, 1, 1, compInt);
call    0 returned 1
        1:  682:	t = repositoryGetProduct(&p, 0);
call    0 returned 1
       1*:  683:	assert(productGetI(t) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  683-block  0
call    3 never executed
       1*:  684:	assert(!strcmp(productGetType(t),"a"));
        1:  684-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  684-block  1
call    3 never executed
       1*:  685:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  685-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  685-block  1
call    3 never executed
       1*:  686:	assert(!strcmp(productGetModel(t),"c"));
        1:  686-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  686-block  1
call    3 never executed
       1*:  687:	assert(productGetPrice(t) == 1);
        1:  687-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  687-block  1
call    3 never executed
       1*:  688:	assert(productGetQuantity(t) == 2);
        1:  688-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  688-block  1
call    3 never executed
       1*:  689:	assert(productGetMemory(t) == 1);
        1:  689-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  689-block  1
call    3 never executed
        -:  690:	
        1:  691:	t = repositoryGetProduct(&p, 1);
        1:  691-block  0
call    0 returned 1
       1*:  692:	assert(productGetI(t) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  692-block  0
call    3 never executed
       1*:  693:	assert(!strcmp(productGetType(t),"a"));
        1:  693-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  693-block  1
call    3 never executed
       1*:  694:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  694-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  694-block  1
call    3 never executed
       1*:  695:	assert(!strcmp(productGetModel(t),"z"));
        1:  695-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  695-block  1
call    3 never executed
       1*:  696:	assert(productGetPrice(t) == 2);
        1:  696-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  696-block  1
call    3 never executed
       1*:  697:	assert(productGetQuantity(t) == 1);
        1:  697-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  697-block  1
call    3 never executed
       1*:  698:	assert(productGetMemory(t) == 1);
        1:  698-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  698-block  1
call    3 never executed
        -:  699:	
        -:  700:	// test 2
        1:  701:	serviceSort(&p, 1, 2, compInt);
        1:  701-block  0
call    0 returned 1
        1:  702:	t = repositoryGetProduct(&p, 1);
call    0 returned 1
       1*:  703:	assert(productGetI(t) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  703-block  0
call    3 never executed
       1*:  704:	assert(!strcmp(productGetType(t),"a"));
        1:  704-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  704-block  1
call    3 never executed
       1*:  705:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  705-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  705-block  1
call    3 never executed
       1*:  706:	assert(!strcmp(productGetModel(t),"c"));
        1:  706-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  706-block  1
call    3 never executed
       1*:  707:	assert(productGetPrice(t) == 1);
        1:  707-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  707-block  1
call    3 never executed
       1*:  708:	assert(productGetQuantity(t) == 2);
        1:  708-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  708-block  1
call    3 never executed
       1*:  709:	assert(productGetMemory(t) == 1);
        1:  709-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  709-block  1
call    3 never executed
        -:  710:	
        1:  711:	t = repositoryGetProduct(&p, 0);
        1:  711-block  0
call    0 returned 1
       1*:  712:	assert(productGetI(t) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  712-block  0
call    3 never executed
       1*:  713:	assert(!strcmp(productGetType(t),"a"));
        1:  713-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  713-block  1
call    3 never executed
       1*:  714:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  714-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  714-block  1
call    3 never executed
       1*:  715:	assert(!strcmp(productGetModel(t),"z"));
        1:  715-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  715-block  1
call    3 never executed
       1*:  716:	assert(productGetPrice(t) == 2);
        1:  716-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  716-block  1
call    3 never executed
       1*:  717:	assert(productGetQuantity(t) == 1);
        1:  717-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  717-block  1
call    3 never executed
       1*:  718:	assert(productGetMemory(t) == 1);
        1:  718-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  718-block  1
call    3 never executed
        -:  719:	
        -:  720:	// test 2
        1:  721:	serviceSort(&p, 2, 2, compInt);
        1:  721-block  0
call    0 returned 1
        1:  722:	t = repositoryGetProduct(&p, 0);
call    0 returned 1
       1*:  723:	assert(productGetI(t) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  723-block  0
call    3 never executed
       1*:  724:	assert(!strcmp(productGetType(t),"a"));
        1:  724-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  724-block  1
call    3 never executed
       1*:  725:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  725-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  725-block  1
call    3 never executed
       1*:  726:	assert(!strcmp(productGetModel(t),"c"));
        1:  726-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  726-block  1
call    3 never executed
       1*:  727:	assert(productGetPrice(t) == 1);
        1:  727-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  727-block  1
call    3 never executed
       1*:  728:	assert(productGetQuantity(t) == 2);
        1:  728-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  728-block  1
call    3 never executed
       1*:  729:	assert(productGetMemory(t) == 1);
        1:  729-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  729-block  1
call    3 never executed
        -:  730:	
        1:  731:	t = repositoryGetProduct(&p, 1);
        1:  731-block  0
call    0 returned 1
       1*:  732:	assert(productGetI(t) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  732-block  0
call    3 never executed
       1*:  733:	assert(!strcmp(productGetType(t),"a"));
        1:  733-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  733-block  1
call    3 never executed
       1*:  734:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  734-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  734-block  1
call    3 never executed
       1*:  735:	assert(!strcmp(productGetModel(t),"z"));
        1:  735-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  735-block  1
call    3 never executed
       1*:  736:	assert(productGetPrice(t) == 2);
        1:  736-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  736-block  1
call    3 never executed
       1*:  737:	assert(productGetQuantity(t) == 1);
        1:  737-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  737-block  1
call    3 never executed
       1*:  738:	assert(productGetMemory(t) == 1);
        1:  738-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  738-block  1
call    3 never executed
        -:  739:	
        -:  740:	// test 4
        1:  741:	serviceSort(&p, 2, 1, compInt);
        1:  741-block  0
call    0 returned 1
        1:  742:	t = repositoryGetProduct(&p, 1);
call    0 returned 1
       1*:  743:	assert(productGetI(t) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  743-block  0
call    3 never executed
       1*:  744:	assert(!strcmp(productGetType(t),"a"));
        1:  744-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  744-block  1
call    3 never executed
       1*:  745:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  745-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  745-block  1
call    3 never executed
       1*:  746:	assert(!strcmp(productGetModel(t),"c"));
        1:  746-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  746-block  1
call    3 never executed
       1*:  747:	assert(productGetPrice(t) == 1);
        1:  747-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  747-block  1
call    3 never executed
       1*:  748:	assert(productGetQuantity(t) == 2);
        1:  748-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  748-block  1
call    3 never executed
       1*:  749:	assert(productGetMemory(t) == 1);
        1:  749-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  749-block  1
call    3 never executed
        -:  750:	
        1:  751:	t = repositoryGetProduct(&p, 0);
        1:  751-block  0
call    0 returned 1
       1*:  752:	assert(productGetI(t) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  752-block  0
call    3 never executed
       1*:  753:	assert(!strcmp(productGetType(t),"a"));
        1:  753-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  753-block  1
call    3 never executed
       1*:  754:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  754-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  754-block  1
call    3 never executed
       1*:  755:	assert(!strcmp(productGetModel(t),"z"));
        1:  755-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  755-block  1
call    3 never executed
       1*:  756:	assert(productGetPrice(t) == 2);
        1:  756-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  756-block  1
call    3 never executed
       1*:  757:	assert(productGetQuantity(t) == 1);
        1:  757-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  757-block  1
call    3 never executed
       1*:  758:	assert(productGetMemory(t) == 1);
        1:  758-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  758-block  1
call    3 never executed
        -:  759:	
        1:  760:	productsDestructor(&p);
        1:  760-block  0
call    0 returned 1
        1:  761:}
        -:  762:
function testServiceSort2 called 1 returned 100% blocks executed 70%
        1:  763:void testServiceSort2()
        -:  764:{Products p;
        -:  765:	Product *t;
        -:  766:	
        1:  767:	productsConstructor(&p);
        1:  767-block  0
call    0 returned 1
        1:  768:	serviceAdauga(&p, "a", "b", "z", 2);
call    0 returned 1
        1:  769:	serviceAdauga(&p, "a", "b", "c", 1);
call    0 returned 1
        1:  770:	serviceAdauga(&p, "a", "b", "c", 1);
call    0 returned 1
        -:  771:	
        -:  772:	// test 1
        1:  773:	serviceSort(&p, 1, 1, compInt);
call    0 returned 1
        1:  774:	t = repositoryGetProduct(&p, 0);
call    0 returned 1
       1*:  775:	assert(productGetI(t) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  775-block  0
call    3 never executed
       1*:  776:	assert(!strcmp(productGetType(t),"a"));
        1:  776-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  776-block  1
call    3 never executed
       1*:  777:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  777-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  777-block  1
call    3 never executed
       1*:  778:	assert(!strcmp(productGetModel(t),"c"));
        1:  778-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  778-block  1
call    3 never executed
       1*:  779:	assert(productGetPrice(t) == 1);
        1:  779-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  779-block  1
call    3 never executed
       1*:  780:	assert(productGetQuantity(t) == 2);
        1:  780-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  780-block  1
call    3 never executed
       1*:  781:	assert(productGetMemory(t) == 1);
        1:  781-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  781-block  1
call    3 never executed
        -:  782:	
        1:  783:	t = repositoryGetProduct(&p, 1);
        1:  783-block  0
call    0 returned 1
       1*:  784:	assert(productGetI(t) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  784-block  0
call    3 never executed
       1*:  785:	assert(!strcmp(productGetType(t),"a"));
        1:  785-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  785-block  1
call    3 never executed
       1*:  786:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  786-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  786-block  1
call    3 never executed
       1*:  787:	assert(!strcmp(productGetModel(t),"z"));
        1:  787-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  787-block  1
call    3 never executed
       1*:  788:	assert(productGetPrice(t) == 2);
        1:  788-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  788-block  1
call    3 never executed
       1*:  789:	assert(productGetQuantity(t) == 1);
        1:  789-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  789-block  1
call    3 never executed
       1*:  790:	assert(productGetMemory(t) == 1);
        1:  790-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  790-block  1
call    3 never executed
        -:  791:	
        -:  792:	// test 2
        1:  793:	serviceSort(&p, 1, 2, compInt);
        1:  793-block  0
call    0 returned 1
        1:  794:	t = repositoryGetProduct(&p, 1);
call    0 returned 1
       1*:  795:	assert(productGetI(t) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  795-block  0
call    3 never executed
       1*:  796:	assert(!strcmp(productGetType(t),"a"));
        1:  796-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  796-block  1
call    3 never executed
       1*:  797:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  797-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  797-block  1
call    3 never executed
       1*:  798:	assert(!strcmp(productGetModel(t),"c"));
        1:  798-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  798-block  1
call    3 never executed
       1*:  799:	assert(productGetPrice(t) == 1);
        1:  799-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  799-block  1
call    3 never executed
       1*:  800:	assert(productGetQuantity(t) == 2);
        1:  800-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  800-block  1
call    3 never executed
       1*:  801:	assert(productGetMemory(t) == 1);
        1:  801-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  801-block  1
call    3 never executed
        -:  802:	
        1:  803:	t = repositoryGetProduct(&p, 0);
        1:  803-block  0
call    0 returned 1
       1*:  804:	assert(productGetI(t) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  804-block  0
call    3 never executed
       1*:  805:	assert(!strcmp(productGetType(t),"a"));
        1:  805-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  805-block  1
call    3 never executed
       1*:  806:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  806-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  806-block  1
call    3 never executed
       1*:  807:	assert(!strcmp(productGetModel(t),"z"));
        1:  807-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  807-block  1
call    3 never executed
       1*:  808:	assert(productGetPrice(t) == 2);
        1:  808-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  808-block  1
call    3 never executed
       1*:  809:	assert(productGetQuantity(t) == 1);
        1:  809-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  809-block  1
call    3 never executed
       1*:  810:	assert(productGetMemory(t) == 1);
        1:  810-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  810-block  1
call    3 never executed
        -:  811:	
        -:  812:	// test 2
        1:  813:	serviceSort(&p, 2, 2, compInt);
        1:  813-block  0
call    0 returned 1
        1:  814:	t = repositoryGetProduct(&p, 0);
call    0 returned 1
       1*:  815:	assert(productGetI(t) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  815-block  0
call    3 never executed
       1*:  816:	assert(!strcmp(productGetType(t),"a"));
        1:  816-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  816-block  1
call    3 never executed
       1*:  817:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  817-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  817-block  1
call    3 never executed
       1*:  818:	assert(!strcmp(productGetModel(t),"c"));
        1:  818-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  818-block  1
call    3 never executed
       1*:  819:	assert(productGetPrice(t) == 1);
        1:  819-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  819-block  1
call    3 never executed
       1*:  820:	assert(productGetQuantity(t) == 2);
        1:  820-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  820-block  1
call    3 never executed
       1*:  821:	assert(productGetMemory(t) == 1);
        1:  821-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  821-block  1
call    3 never executed
        -:  822:	
        1:  823:	t = repositoryGetProduct(&p, 1);
        1:  823-block  0
call    0 returned 1
       1*:  824:	assert(productGetI(t) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  824-block  0
call    3 never executed
       1*:  825:	assert(!strcmp(productGetType(t),"a"));
        1:  825-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  825-block  1
call    3 never executed
       1*:  826:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  826-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  826-block  1
call    3 never executed
       1*:  827:	assert(!strcmp(productGetModel(t),"z"));
        1:  827-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  827-block  1
call    3 never executed
       1*:  828:	assert(productGetPrice(t) == 2);
        1:  828-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  828-block  1
call    3 never executed
       1*:  829:	assert(productGetQuantity(t) == 1);
        1:  829-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  829-block  1
call    3 never executed
       1*:  830:	assert(productGetMemory(t) == 1);
        1:  830-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  830-block  1
call    3 never executed
        -:  831:	
        -:  832:	// test 4
        1:  833:	serviceSort(&p, 2, 1, compInt);
        1:  833-block  0
call    0 returned 1
        1:  834:	t = repositoryGetProduct(&p, 1);
call    0 returned 1
       1*:  835:	assert(productGetI(t) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  835-block  0
call    3 never executed
       1*:  836:	assert(!strcmp(productGetType(t),"a"));
        1:  836-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  836-block  1
call    3 never executed
       1*:  837:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  837-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  837-block  1
call    3 never executed
       1*:  838:	assert(!strcmp(productGetModel(t),"c"));
        1:  838-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  838-block  1
call    3 never executed
       1*:  839:	assert(productGetPrice(t) == 1);
        1:  839-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  839-block  1
call    3 never executed
       1*:  840:	assert(productGetQuantity(t) == 2);
        1:  840-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  840-block  1
call    3 never executed
       1*:  841:	assert(productGetMemory(t) == 1);
        1:  841-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  841-block  1
call    3 never executed
        -:  842:	
        1:  843:	t = repositoryGetProduct(&p, 0);
        1:  843-block  0
call    0 returned 1
       1*:  844:	assert(productGetI(t) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  844-block  0
call    3 never executed
       1*:  845:	assert(!strcmp(productGetType(t),"a"));
        1:  845-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  845-block  1
call    3 never executed
       1*:  846:	assert(!strcmp(productGetProducedBy(t),"b"));
        1:  846-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  846-block  1
call    3 never executed
       1*:  847:	assert(!strcmp(productGetModel(t),"z"));
        1:  847-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  847-block  1
call    3 never executed
       1*:  848:	assert(productGetPrice(t) == 2);
        1:  848-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  848-block  1
call    3 never executed
       1*:  849:	assert(productGetQuantity(t) == 1);
        1:  849-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  849-block  1
call    3 never executed
       1*:  850:	assert(productGetMemory(t) == 1);
        1:  850-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  850-block  1
call    3 never executed
        -:  851:	
        1:  852:	productsDestructor(&p);
        1:  852-block  0
call    0 returned 1
        1:  853:}
        -:  854:
function testServiceSort called 1 returned 100% blocks executed 100%
        1:  855:void testServiceSort()
        -:  856:{
        1:  857:	testServiceSort1();
        1:  857-block  0
call    0 returned 1
        1:  858:	testServiceSort2();
call    0 returned 1
        1:  859:}
        -:  860:
        -:  861:// tests a service function
        -:  862:// the name of the function is after
        -:  863:// "test" from the name of this function
        -:  864:// in: true
        -:  865:// out: true
function testServiceFilter called 1 returned 100% blocks executed 85%
        1:  866:void testServiceFilter()
        -:  867:{
        -:  868:	bool s[7];
        -:  869:	
        -:  870:	// test 1
        8:  871:	for (unsigned int i = 0; i < 7; ++i)
        1:  871-block  0
        8:  871-block  1
branch  0 taken 7
branch  1 taken 1 (fallthrough)
        7:  872:		s[i] = 0;
        7:  872-block  0
        1:  873:	serviceFilter(s, 1);
        1:  873-block  0
call    0 returned 1
        8:  874:	for (unsigned int i = 0; i < 7; ++i)
        7:  874-block  0
        8:  874-block  1
branch  0 taken 7
branch  1 taken 1 (fallthrough)
        7:  875:		if (i == 2)
        7:  875-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 6
       1*:  876:			assert(s[i]);
        1:  876-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  876-block  1
call    2 never executed
        -:  877:		else
       6*:  878:			assert(!s[i]);
        6:  878-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    %%%%%:  878-block  1
call    2 never executed
        -:  879:		
        -:  880:	// test 2
        8:  881:	for (unsigned int i = 0; i < 7; ++i)
        1:  881-block  0
        8:  881-block  1
branch  0 taken 7
branch  1 taken 1 (fallthrough)
        7:  882:		s[i] = 0;
        7:  882-block  0
        1:  883:	serviceFilter(s, 2);
        1:  883-block  0
call    0 returned 1
        8:  884:	for (unsigned int i = 0; i < 7; ++i)
        7:  884-block  0
        8:  884-block  1
branch  0 taken 7
branch  1 taken 1 (fallthrough)
        7:  885:		if (i == 4)
        7:  885-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 6
       1*:  886:			assert(s[i]);
        1:  886-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  886-block  1
call    2 never executed
        -:  887:		else
       6*:  888:			assert(!s[i]);
        6:  888-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    %%%%%:  888-block  1
call    2 never executed
        -:  889:		
        -:  890:	// test 3
        8:  891:	for (unsigned int i = 0; i < 7; ++i)
        1:  891-block  0
        8:  891-block  1
branch  0 taken 7
branch  1 taken 1 (fallthrough)
        7:  892:		s[i] = 0;
        7:  892-block  0
        1:  893:	serviceFilter(s, 3);
        1:  893-block  0
call    0 returned 1
        8:  894:	for (unsigned int i = 0; i < 7; ++i)
        7:  894-block  0
        8:  894-block  1
branch  0 taken 7
branch  1 taken 1 (fallthrough)
        7:  895:		if (i == 5)
        7:  895-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 6
       1*:  896:			assert(s[i]);
        1:  896-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  896-block  1
call    2 never executed
        -:  897:		else
       6*:  898:			assert(!s[i]);
        6:  898-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    %%%%%:  898-block  1
call    2 never executed
        -:  899:		
        -:  900:	// test 4
        8:  901:	for (unsigned int i = 0; i < 7; ++i)
        1:  901-block  0
        8:  901-block  1
branch  0 taken 7
branch  1 taken 1 (fallthrough)
        7:  902:		s[i] = 0;
        7:  902-block  0
        1:  903:	serviceFilter(s, 0);
        1:  903-block  0
call    0 returned 1
        8:  904:	for (unsigned int i = 0; i < 7; ++i)
        7:  904-block  0
        8:  904-block  1
branch  0 taken 7
branch  1 taken 1 (fallthrough)
       7*:  905:		assert(!s[i]);
        7:  905-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    %%%%%:  905-block  1
call    2 never executed
        1:  906:}
        -:  907:
        -:  908:// test valid
        -:  909:
        -:  910:// tests a valid function
        -:  911:// the name of the function is after
        -:  912:// "test" from the name of this function
        -:  913:// in: true
        -:  914:// out: true
function testValidProduct called 1 returned 100% blocks executed 80%
        1:  915:void testValidProduct()
        -:  916:{
        -:  917:	Product p;
        1:  918:	productConstructor(&p, 0, "a", "b", "c", 3, 5, 1);
        1:  918-block  0
call    0 returned 1
       1*:  919:	assert(validProduct(&p));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  919-block  0
call    3 never executed
        1:  920:}
        -:  921:
        -:  922:// tests a valid function
        -:  923:// the name of the function is after
        -:  924:// "test" from the name of this function
        -:  925:// in: true
        -:  926:// out: true
function testValidIdentification called 1 returned 100% blocks executed 85%
        1:  927:void testValidIdentification()
        -:  928:{
      101:  929:	for (int i = -SIZE; i < 0; ++i)
        1:  929-block  0
      100:  929-block  1
      101:  929-block  2
branch  0 taken 100
branch  1 taken 1 (fallthrough)
     100*:  930:		assert(!validIdentification(i));
      100:  930-block  0
call    0 returned 100
branch  1 taken 0 (fallthrough)
branch  2 taken 100
    %%%%%:  930-block  1
call    3 never executed
      101:  931:	for (unsigned int i = 0; i < SIZE; ++i)
        1:  931-block  0
      100:  931-block  1
      101:  931-block  2
branch  0 taken 100
branch  1 taken 1 (fallthrough)
     100*:  932:		assert(validIdentification(i));
      100:  932-block  0
call    0 returned 100
branch  1 taken 0 (fallthrough)
branch  2 taken 100
    %%%%%:  932-block  1
call    3 never executed
        1:  933:}
        -:  934:
        -:  935:// tests a valid function
        -:  936:// the name of the function is after
        -:  937:// "test" from the name of this function
        -:  938:// in: true
        -:  939:// out: true
function testValidAction called 1 returned 100% blocks executed 81%
        1:  940:void testValidAction()
        -:  941:{
        7:  942:	for (unsigned int i = 0; i <= 5; ++i)
        1:  942-block  0
        6:  942-block  1
        7:  942-block  2
branch  0 taken 6
branch  1 taken 1 (fallthrough)
       6*:  943:		assert(validAction(i));
        6:  943-block  0
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
    %%%%%:  943-block  1
call    3 never executed
       1*:  944:	assert(validAction(10));
        1:  944-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  944-block  1
call    3 never executed
      991:  945:	for (unsigned int i = 11; i <= 1000; ++i)
        1:  945-block  0
      990:  945-block  1
      991:  945-block  2
branch  0 taken 990
branch  1 taken 1 (fallthrough)
     990*:  946:		assert(!validAction(i));
      990:  946-block  0
call    0 returned 990
branch  1 taken 0 (fallthrough)
branch  2 taken 990
    %%%%%:  946-block  1
call    3 never executed
        1:  947:}
        -:  948:
        -:  949:// tests a valid function
        -:  950:// the name of the function is after
        -:  951:// "test" from the name of this function
        -:  952:// in: true
        -:  953:// out: true
function testValidFilterAction called 1 returned 100% blocks executed 84%
        1:  954:void testValidFilterAction()
        -:  955:{
     1001:  956:	for (int i = -1000; i < 0; ++i)
        1:  956-block  0
     1000:  956-block  1
     1001:  956-block  2
branch  0 taken 1000
branch  1 taken 1 (fallthrough)
    1000*:  957:		assert(!validFilterAction(i));
     1000:  957-block  0
call    0 returned 1000
branch  1 taken 0 (fallthrough)
branch  2 taken 1000
    %%%%%:  957-block  1
call    3 never executed
        5:  958:	for (unsigned int i = 0; i <= 3; ++i)
        1:  958-block  0
        4:  958-block  1
        5:  958-block  2
branch  0 taken 4
branch  1 taken 1 (fallthrough)
       4*:  959:		assert(validFilterAction(i));
        4:  959-block  0
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
    %%%%%:  959-block  1
call    3 never executed
      998:  960:	for (unsigned int i = 4; i <= 1000; ++i)
        1:  960-block  0
      997:  960-block  1
      998:  960-block  2
branch  0 taken 997
branch  1 taken 1 (fallthrough)
     997*:  961:		assert(!validFilterAction(i));
      997:  961-block  0
call    0 returned 997
branch  1 taken 0 (fallthrough)
branch  2 taken 997
    %%%%%:  961-block  1
call    3 never executed
        1:  962:}
        -:  963:
        -:  964:// tests a valid function
        -:  965:// the name of the function is after
        -:  966:// "test" from the name of this function
        -:  967:// in: true
        -:  968:// out: true
function testValidSortActions called 1 returned 100% blocks executed 89%
        1:  969:void testValidSortActions()
        -:  970:{
      202:  971:	for (int i = -100; i <= 100; ++i)
        1:  971-block  0
      201:  971-block  1
      202:  971-block  2
branch  0 taken 201
branch  1 taken 1 (fallthrough)
    40602:  972:		for (int j = -100; j <= 100; ++j)
      201:  972-block  0
    40401:  972-block  1
    40602:  972-block  2
branch  0 taken 40401
branch  1 taken 201 (fallthrough)
    40401:  973:			if (i >= 0 && i <= 2 && j >= 0 && j <= 2)
    40401:  973-block  0
branch  0 taken 20301 (fallthrough)
branch  1 taken 20100
    20301:  973-block  1
branch  2 taken 603 (fallthrough)
branch  3 taken 19698
      603:  973-block  2
branch  4 taken 303 (fallthrough)
branch  5 taken 300
      303:  973-block  3
branch  6 taken 9 (fallthrough)
branch  7 taken 294
       9*:  974:				assert(validSortActions(i, j));
        9:  974-block  0
call    0 returned 9
branch  1 taken 0 (fallthrough)
branch  2 taken 9
    %%%%%:  974-block  1
call    3 never executed
        9:  974-block  2
        -:  975:			else
   40392*:  976:				assert(!validSortActions(i, j));
    40392:  976-block  0
call    0 returned 40392
branch  1 taken 0 (fallthrough)
branch  2 taken 40392
    %%%%%:  976-block  1
call    3 never executed
        1:  977:}
        -:  978:
        -:  979:
        -:  980:
        -:  981:
        -:  982:// parts
        -:  983:
        -:  984:// test domain
        -:  985:// in: true
        -:  986:// out: domain was tested
function testDomain called 1 returned 100% blocks executed 100%
        1:  987:void testDomain()
        -:  988:{
        1:  989:	testProduct();
        1:  989-block  0
call    0 returned 1
        1:  990:}
        -:  991:
        -:  992:// test repository
        -:  993:// in: true
        -:  994:// out: repository was tested
function testRepository called 1 returned 100% blocks executed 100%
        1:  995:void testRepository()
        -:  996:{
        1:  997:	testProducts();
        1:  997-block  0
call    0 returned 1
        1:  998:}
        -:  999:
        -: 1000:// test service
        -: 1001:// in: true
        -: 1002:// out: service was tested
function testService called 1 returned 100% blocks executed 100%
        1: 1003:void testService()
        -: 1004:{
        1: 1005:	testServiceAdauga();
        1: 1005-block  0
call    0 returned 1
        1: 1006:	testServiceActualizare();
call    0 returned 1
        1: 1007:	testServiceSterge();
call    0 returned 1
        1: 1008:	testServiceSort();
call    0 returned 1
        1: 1009:	testServiceFilter();
call    0 returned 1
        1: 1010:}
        -: 1011:
        -: 1012:// test valid
        -: 1013:// in: true
        -: 1014:// out: valid was tested
function testValid called 1 returned 100% blocks executed 100%
        1: 1015:void testValid()
        -: 1016:{
        1: 1017:	testValidProduct();
        1: 1017-block  0
call    0 returned 1
        1: 1018:	testValidIdentification();
call    0 returned 1
        1: 1019:	testValidAction();
call    0 returned 1
        1: 1020:	testValidFilterAction();
call    0 returned 1
        1: 1021:	testValidSortActions();
call    0 returned 1
        1: 1022:}
        -: 1023:
        -: 1024:
        -: 1025:
        -: 1026:
        -: 1027:
        -: 1028:// main
        -: 1029:
        -: 1030:// test domain, repository and service
        -: 1031:// in: true
        -: 1032:// out: domain, repository and service were tested
function test called 1 returned 100% blocks executed 100%
        1: 1033:void test()
        -: 1034:{
        1: 1035:	testDomain();
        1: 1035-block  0
call    0 returned 1
        1: 1036:	testRepository();
call    0 returned 1
        1: 1037:	testService();
call    0 returned 1
        1: 1038:	testValid();
call    0 returned 1
        1: 1039:}
